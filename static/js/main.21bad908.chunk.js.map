{"version":3,"sources":["actions.ts","util.ts","ConfigStore.tsx","List.tsx","Form.tsx","Auth.tsx","Setting.tsx","GlobalMenu.tsx","store.ts","Login.tsx","Overlay.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["addFlashMessage","value","type","connectionCreated","conn","getAllUrlParams","url","queryString","split","window","location","search","slice","obj","arr","i","length","a","paramName","paramValue","match","key","replace","index","exec","push","allowedStandardObjects","ConfigStore","localStorage","getItem","setItem","JSON","stringify","defaultValue","this","setObject","parse","removeItem","Settings","Key","AllowedStandardObjects","Default","objects","views","getQuery","object","fields","params","join","withRouter","props","useState","records","setRecords","listableField","setListableField","listableFieldOptions","setListableFieldOptions","dispatch","useDispatch","useSelector","state","flash","href","getFields","setFields","deleteRequest","useCallback","id","sobject","destroy","err","ret","success","query","res","handleClose","selectField","addField","console","log","saveView","settings","getObject","view","useEffect","describe","map","field","label","name","csvData","useMemo","forEach","record","csvRow","reduce","Container","component","maxWidth","Fragment","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","ContentProps","message","Button","variant","color","onClick","history","className","onChange","options","data","Table","size","TableHead","TableRow","TableCell","TableBody","Id","useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","secondary","main","form","width","submit","classes","setForm","createOrUpdate","e","preventDefault","update","Object","assign","create","retrieve","init","fieldNames","includes","prev","CssBaseline","Typography","noValidate","Grid","container","item","xs","sm","TextField","autoComplete","fullWidth","target","FormControlLabel","control","Checkbox","jsforce","require","Auth","browser","connection","instanceUrl","login","on","children","Setting","selectObjects","setSelectObjects","setObjects","selectObject","addObject","deleteObject","findIndex","v","splice","describeGlobal","sobjects","filter","queryable","custom","m","pathname","path","tabValue","setTabValue","handleChange","event","AppBar","position","Tabs","Tab","INIT_STATE","overlay","rootReducer","action","concat","Login","Overlay","CircularProgress","config","clientId","redirectUri","Home","App","store","createStore","exact","render","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21bad908.chunk.js","sourcesContent":["\nconst setOverlay = () => {\n  return {\n    type: 'set-overlay',\n  }\n}\n\nconst clearOverlay = () => {\n  return {\n    type: 'clear-overlay',\n  }\n}\n\nconst addFlashMessage = (value: string) => {\n  return {\n    type: 'add-flash-message',\n    value: value,\n  }\n}\n\nconst clearFlashMessage = () => {\n  return {\n    type: 'clear-flash-message',\n  }\n}\n\nconst connectionCreated = (conn: any) => {\n  return {\n    type: 'connection-created',\n    conn: conn,\n  }\n}\n\n\nexport {\n  setOverlay,\n  clearOverlay,\n  addFlashMessage,\n  clearFlashMessage,\n  connectionCreated,\n}\n","const getAllUrlParams = (url: string) => {\n    // get query string from url (optional) or window\n    let queryString = url ? url.split('?')[1] : window.location.search.slice(1);\n\n    // we'll store the parameters here\n    const obj: any = {};\n\n    // if query string exists\n    if (queryString) {\n\n        // stuff after # is not part of query string, so get rid of it\n        queryString = queryString.split('#')[0];\n\n        // split our query string into its component parts\n        const arr = queryString.split('&');\n\n        for (let i = 0; i < arr.length; i++) {\n            // separate the keys and the values\n            const a = arr[i].split('=');\n\n            // set parameter name and value (use 'true' if empty)\n            let paramName: string = a[0];\n            let paramValue = typeof (a[1]) === 'undefined' ? true : a[1];\n\n            // (optional) keep case consistent\n            // paramName = paramName.toLowerCase();\n            // if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();\n\n            // if the paramName ends with square brackets, e.g. colors[] or colors[2]\n            if (paramName.match(/\\[(\\d+)?\\]$/)) {\n\n                // create key if it doesn't exist\n                const key = paramName.replace(/\\[(\\d+)?\\]/, '');\n                if (!obj[key]) obj[key] = [];\n\n                // if it's an indexed array e.g. colors[2]\n                if (paramName.match(/\\[\\d+\\]$/)) {\n                    // get the index value and add the entry at the appropriate position\n                    const index = /\\[(\\d+)\\]/.exec(paramName)![1];\n                    obj[key][index] = paramValue;\n                } else {\n                    // otherwise add the value to the end of the array\n                    obj[key].push(paramValue);\n                }\n            } else {\n                // we're dealing with a string\n                if (!obj[paramName]) {\n                    // if it doesn't exist, create property\n                    obj[paramName] = paramValue;\n                } else if (obj[paramName] && typeof obj[paramName] === 'string'){\n                    // if property does exist and it's a string, convert it to an array\n                    obj[paramName] = [obj[paramName]];\n                    obj[paramName].push(paramValue);\n                } else {\n                    // otherwise add the property\n                    obj[paramName].push(paramValue);\n                }\n            }\n        }\n    }\n\n    return obj;\n}\n\nexport {\n    getAllUrlParams,\n}\n","class ConfigStore_ {\n    get(key: string) {\n        return localStorage.getItem(key);\n    }\n\n    set(key: string, value: string) {\n        localStorage.setItem(key, value);\n    }\n\n    setObject(key: string, value: Object) {\n        localStorage.setItem(key, JSON.stringify(value));\n    }\n\n    getObject(key: string, defaultValue: Object = []) {\n        const value = localStorage.getItem(key);\n        if (value === null) {\n            this.setObject(key, defaultValue);\n            return defaultValue;\n        }\n        return JSON.parse(value)\n    }\n\n    remove(key: string) {\n        localStorage.removeItem(key);\n    }\n}\nconst allowedStandardObjects = [\n    'Account',\n    'Contact',\n    'User',\n    'Lead',\n    'Opportunity',\n    'Case',\n];\nexport const ConfigStore = new ConfigStore_();\nexport const Settings = {\n    Key: 'lgui-settings',\n    AllowedStandardObjects: allowedStandardObjects,\n    Default: {\n        objects: allowedStandardObjects,\n        views: {},\n    },\n};\n\n","import React, {useEffect, useState, useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Container from \"@material-ui/core/Container\";\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { addFlashMessage, clearFlashMessage, setOverlay, clearOverlay } from './actions';\nimport Button from \"@material-ui/core/Button\";\nimport {withRouter} from \"react-router\";\nimport {getAllUrlParams} from './util';\nimport Select from \"react-select\";\nimport { ConfigStore, Settings } from \"./ConfigStore\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\n \ntype Response = {\n  records: any\n}\n\nconst getFields = (params: any) => {\n  const defaultFields = [\n    'Id',\n  ];\n  if (params.fields) {\n    return params.fields.split(',');\n  }\n  return defaultFields;\n}\n\nconst getQuery = (object: string, fields: Array<string>, params: any) => {\n  return `SELECT ${fields.join(',')} FROM ${object}`;\n}\n\nconst List: React.FC<any> = (props: any) => {\n  const [records, setRecords] = useState([]);\n  const [listableField, setListableField] = useState({} as any);\n  const [listableFieldOptions, setListableFieldOptions] = useState([]);\n  const dispatch = useDispatch();\n  const conn = useSelector((state: any) => state.conn);\n  const flash = useSelector((state: any) => state.flash);\n  const params = getAllUrlParams(window.location.href);\n  const [fields, setFields] = useState(getFields(params));\n\n  const deleteRequest = useCallback((id: string) => {\n    dispatch(setOverlay());\n    conn.sobject(props.object).destroy(id, (err: any, ret: any) => {\n      if (err || !ret.success) {\n        dispatch(clearOverlay());\n        addFlashMessage(err);\n        return;\n      }\n      const query = getQuery(props.object, fields, params);\n      conn.query(query, function(err: any, res: Response) {\n        if (err) {\n          addFlashMessage(err);\n          dispatch(clearOverlay())\n          return;\n        }\n        setRecords(res.records);\n        dispatch(addFlashMessage(`${id} record is deleted`));\n        dispatch(clearOverlay())\n      });\n    });\n  }, [props.object, fields, params])\n\n  const handleClose = useCallback(() => {\n    dispatch(clearFlashMessage())\n  }, [])\n\n  const selectField = useCallback((value: any) => {\n    setListableField(value);\n  }, [])\n\n  const addField = useCallback(() => {\n    fields.push(listableField.value)\n    console.log(listableField)\n    setFields(fields);\n    const query = getQuery(props.object, fields, params);\n    conn.query(query, (err: any, res: Response) => {\n      if (err) {\n        addFlashMessage(err);\n        dispatch(clearOverlay())\n        return;\n      }\n      setRecords(res.records);\n      dispatch(clearOverlay())\n    });\n  }, [fields, listableField, props.object, params])\n\n  const saveView = useCallback(() => {\n    const settings = ConfigStore.getObject(Settings.Key, Settings.Default);\n    const views = settings.views[props.object];\n    const view = {\n      fields,\n    }\n    if (views) {\n      views.push(view);\n    } else {\n      settings.views[props.object] = [view];\n    }\n    ConfigStore.setObject(Settings.Key, settings);\n    dispatch(addFlashMessage('view is created'))\n  }, [props.object])\n\n  useEffect(() => {\n    dispatch(setOverlay())\n    const query = getQuery(props.object, fields, params);\n    conn.query(query, (err: any, res: Response) => {\n      if (err) {\n        addFlashMessage(err);\n        dispatch(clearOverlay())\n        return;\n      }\n      setRecords(res.records);\n      dispatch(clearOverlay())\n    });\n\n    conn.sobject(props.object).describe((err: any, res: any) => {\n      if (err) {\n        addFlashMessage(err);\n        return;\n      }\n      const fields = res.fields.map((field: any) => {\n        return {\n          label: field.name,\n          value: field.name,\n        }\n      });\n      setListableFieldOptions(fields);\n      setListableField(fields[0])\n    })\n  }, []);\n\n  const csvData = useMemo(() => {\n    const csvData = [];\n    csvData.push(fields);\n    records.forEach((record) => {\n      const csvRow = fields.reduce((arr: Array<any>, field: string) => {\n        arr.push(record[field]);\n        return arr;\n      }, []);\n      csvData.push(csvRow);\n    });\n    return csvData;\n  }, [records, fields])\n\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <React.Fragment>\n        { flash.length > 0 && (\n          <Snackbar\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            key=\"flash-message\"\n            open={true}\n            onClose={handleClose}\n            ContentProps={{\n              'aria-describedby': 'message-id',\n            }}\n            message={<span id=\"message-id\">{flash}</span>}\n          />\n        ) }\n        <Button variant=\"contained\" color=\"primary\" onClick={() => { props.history.push(`/${props.object}/new/`) }}>Create</Button>\n        <Select\n          className='fields'\n          value={listableField}\n          onChange={selectField}\n          options={listableFieldOptions}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={addField}>Add Field</Button>\n        <Button variant=\"contained\" color=\"primary\" onClick={saveView}>Save View</Button>\n        <CSVLink data={csvData}>Download me</CSVLink>\n        <h2>{props.object} List</h2>\n        { records.length !== 0 && (\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Action</TableCell>\n                {fields.map((field: any) => {\n                  return <TableCell key={field}>{field}</TableCell>\n                })}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {records.map((record: any) => (\n                <TableRow key={record.Id}>\n                  <TableCell key=\"action\">\n                    <a href=\"#\" onClick={() => props.history.push(`/${props.object}/${record.Id}/`) }>Edit</a> |\n                    &nbsp;<a href=\"#\" onClick={() => { deleteRequest(record.Id) }}>Delete</a>\n                  </TableCell>\n                  {fields.map((field: any) => {\n                    return <TableCell key={field}>{record[field]}</TableCell>\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </React.Fragment>\n    </Container>\n  );\n}\n\nexport default withRouter(List);\n","import React, {useState, useEffect, useCallback} from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { setOverlay, clearOverlay, addFlashMessage } from './actions';\nimport { getAllUrlParams } from './util';\n\ninterface MyProps extends RouteComponentProps {\n  object: string\n  id: string | null\n}\n\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.white,\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst Form: React.FC<MyProps> = (props: MyProps) => {\n  const classes = useStyles();\n  const fields = [\n    {\n      name: \"FirstName\",\n      label: \"First Name\"\n    },\n    {\n      name: \"LastName\",\n      label: \"Last Name\"\n    },\n    {\n      name: \"email\",\n      label: \"Email\"\n    },\n    {\n      name: \"address\",\n      label: \"Address\"\n    },\n  ];\n\n  const [form, setForm]: any = useState({});\n  const conn = useSelector((state: any) => state.conn);\n  const dispatch = useDispatch();\n  const onFormChange = (name: string) => {\n    return (e: any) => {\n      const value = e.target.value;\n      setForm((prev: any) => {\n        return Object.assign({}, prev, {\n          [name]: value,\n        })\n      })\n    }\n  };\n  const createOrUpdate = useCallback((e: any) => {\n    e.preventDefault();\n    dispatch(setOverlay());\n    if (props.id) {\n      conn.sobject(props.object).update(Object.assign({}, form, {Id: props.id}), (err: any, ret: any) => {\n        dispatch(clearOverlay());\n        if (err) {\n          addFlashMessage(err);\n          return;\n        }\n        dispatch(addFlashMessage(`${props.id} record is updated`));\n        props.history.push(`/${props.object}`);\n      });\n    } else {\n      conn.sobject(props.object).create(form, (err: any, ret: any) => {\n        dispatch(clearOverlay());\n        if (err) {\n          addFlashMessage(err);\n          return;\n        }\n        dispatch(addFlashMessage(`${ret.id} record is created`));\n        props.history.push(`/${props.object}`);\n      });\n    }\n  }, [props.id, props.object]);\n  useEffect(() => {\n    if (props.id !== null) {\n      conn.sobject(props.object).retrieve(props.id, (err: any, ret: any) => {\n        const init: any = {};\n        const fieldNames = fields.map((field) => field.name);\n        for (let key in ret) {\n          if (fieldNames.includes(key)) {\n            init[key] = ret[key]\n          }\n        }\n\n        const params = getAllUrlParams(window.location.href);\n        setForm((prev: any) => Object.assign(init, params));\n      });\n    }\n  }, [props.object, props.id]);\n\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">Create Record</Typography>\n        <form className={classes.form} noValidate>\n          <Grid container spacing={2}>\n            {fields.map((field: any) => {\n              return (\n                <Grid item xs={12} sm={6} key={field.name}>\n                  <TextField\n                    autoComplete=\"fname\"\n                    name={field.name}\n                    variant=\"outlined\"\n                    fullWidth\n                    id={field.name}\n                    label={field.label}\n                    onChange={onFormChange(field.name)}\n                    value={ form[field.name] ? form[field.name] + '' : ''}\n                    // autoFocus\n                  />\n                </Grid>\n              )\n            })}\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={createOrUpdate}\n          >\n            Create\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n}\n\nexport default withRouter(Form);\n","import React, { useEffect } from 'react';\nimport {useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from 'react-router';\nimport { connectionCreated } from './actions';\nconst jsforce = require('jsforce');\n\nconst Auth: React.FC<any> = (props: any) => {\n  const dispatch = useDispatch();\n  const conn = useSelector((state: any) => state.conn)\n  useEffect(() => {\n    if (jsforce.browser.connection && jsforce.browser.connection.instanceUrl !== '') {\n      dispatch(connectionCreated(jsforce.browser.connection))\n    } else {\n      jsforce.browser.login();\n      jsforce.browser.on('connect', function (conn: any) {\n        dispatch(connectionCreated(conn))\n      });\n    }\n  }, [])\n\n  if (conn == null) {\n    return <></>\n  } else {\n    return <>{props.children}</>;\n  }\n}\n\nexport default Auth;\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ConfigStore, Settings } from './ConfigStore';\nimport { Button } from '@material-ui/core';\nimport Select from 'react-select';\nimport {OptionsType} from \"react-select/src/types\";\nimport {addFlashMessage, setOverlay, clearOverlay} from \"./actions\";\n\nconst Setting: React.FC<any> = (props: any) => {\n  const dispatch = useDispatch();\n  const settings = ConfigStore.getObject(Settings.Key, Settings.Default);\n  const [selectObjects, setSelectObjects] = useState(settings.objects);\n  const [object, setObject] = useState({} as any);\n  const [objects, setObjects] = useState([] as Array<any>);\n  const conn = useSelector((state: any) => state.conn);\n  const selectObject = useCallback((e: any) => {\n    setObject(e);\n  }, []);\n  const addObject = useCallback(() => {\n    settings.objects.push(object.value);\n    ConfigStore.setObject(Settings.Key, settings);\n    setSelectObjects(settings.objects);\n  }, [object.value]);\n\n  const deleteObject = (object: string) => {\n    return () => {\n      const index = settings.objects.findIndex((v: any) => v === object);\n      settings.objects.splice(index, 1);\n      ConfigStore.setObject(Settings.Key, settings);\n      setSelectObjects(settings.objects);\n    }\n  };\n\n  const options = useMemo(() => {\n    return objects.map((object: string) => {\n      return { label: object, value: object };\n    });\n  }, [objects]);\n\n  useEffect(() => {\n    dispatch(setOverlay())\n    conn.describeGlobal((err: any, res: any) => {\n      if (err) {\n        addFlashMessage(err);\n        dispatch(clearOverlay());\n        return;\n      }\n      const sobjects = res.sobjects\n        .filter((sobject: any) => {\n          return sobject.queryable &&\n            (sobject.custom || Settings.AllowedStandardObjects.includes(sobject.name)) &&\n            !selectObjects.includes(sobject.name)\n        })\n        .map((sobject: any) => sobject.name);\n      setObjects(sobjects);\n      const name = sobjects[0];\n      setObject({\n        label: name,\n        value: name,\n      });\n      dispatch(clearOverlay());\n    });\n  }, []);\n\n  return (\n    <div>\n      <table>\n        <thead>\n        <tr>\n          <th>Action</th>\n          <th>Object</th>\n        </tr>\n        </thead>\n        <tbody>\n        {selectObjects.map((object: string) => {\n          return (\n            <tr key={object}>\n              <td><a href=\"#\" onClick={deleteObject(object)}>Delete</a></td>\n              <td>{object}</td>\n            </tr>\n          );\n        })}\n        </tbody>\n      </table>\n      <h2>New Object Tab</h2>\n      <form>\n        <Select\n          className='describe-object'\n          value={object}\n          onChange={selectObject}\n          options={options}\n        />\n        <Button onClick={addObject}>Add</Button>\n      </form>\n    </div>\n  );\n}\n\nexport default Setting;\n","import React, { useState, useCallback } from 'react';\nimport { withRouter } from 'react-router';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nconst GlobalMenu: React.FC<any> = (props: any) => {\n  const m = window.location.pathname.match(/^(\\/[a-zA-Z\\d_]+)\\/[a-zA-Z\\d]+/);\n  const path: string = m ? m[1] : window.location.pathname;\n  const [tabValue, setTabValue] = useState(path);\n  const handleChange = useCallback((event: any, value: string) => {\n    setTabValue(value)\n    props.history.push(value)\n  }, []);\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Tabs value={tabValue} onChange={handleChange}>\n          <Tab label=\"Home\" value=\"/\" />\n          {props.objects.map((object: any) => {\n            return <Tab key={object} label={object} value={`/${object}`} />\n          })}\n          <Tab label=\"Setting\" value=\"/setting\" />\n        </Tabs>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default withRouter(GlobalMenu);\n","import { createStore } from 'redux';\n\nconst INIT_STATE = {\n    message: 'hoge',\n    conn: null,\n    flash: [],\n    overlay: false,\n};\n\nconst rootReducer = (state: any = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case 'message-change':\n            return Object.assign({}, state, {\n                message: action.value,\n            });\n        case 'connection-created':\n            return Object.assign({}, state, {\n                conn: action.conn,\n            });\n        case 'add-flash-message':\n            return Object.assign({}, state, {\n                flash: state.flash.concat(action.value),\n            });\n        case 'clear-flash-message':\n            return Object.assign({}, state, {\n                flash: [],\n            });\n        case 'set-overlay':\n            return Object.assign({}, state, {\n                overlay: true,\n            });\n        case 'clear-overlay':\n            return Object.assign({}, state, {\n                overlay: false,\n            });\n    }\n    return state;\n}\n\nexport default function createFinalStore() {\n    return createStore(rootReducer);\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nconst jsforce = require('jsforce');\n\nconst Login: React.FC = () => {\n  return (\n    <Button variant=\"contained\" color=\"primary\" onClick={() => { }}>Login with Salesforce</Button>\n  );\n}\n\nexport default Login;\n","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport { CircularProgress } from '@material-ui/core';\n\nconst Overlay: React.FC = () => {\n  const overlay = useSelector((state: any) => state.overlay);\n  return (\n    <>\n      { overlay && (\n        <div className=\"overlay\">\n          <CircularProgress className=\"circular-progress\"/>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Overlay;\n","import React from 'react';\nimport List from './List';\nimport Form from './Form';\nimport Auth from './Auth';\nimport Setting from './Setting';\nimport './App.scss';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport GlobalMenu from \"./GlobalMenu\";\nimport createFinalStore from './store';\nimport Login from './Login';\nimport Overlay from './Overlay';\nimport { ConfigStore, Settings } from './ConfigStore';\nconst config: any = ConfigStore.getObject(Settings.Key, Settings.Default);\nconst jsforce = require('jsforce');\n\njsforce.browser.init({\n  clientId: '3MVG9yZ.WNe6byQBYCaGTfGZBIwoVDFt8TFZTdt3Umcg0WEU4hFD7a0AdXKrGMxTyREzOyqKMXlVpYKyJeJk7',\n  redirectUri: 'https://tzmfreedom.github.io/lgui'\n});\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={createFinalStore()}>\n      <div className=\"App\">\n        <BrowserRouter>\n          <GlobalMenu objects={config.objects}/>\n          <Switch>\n            {config.objects.map((object: string) => {\n              return <Route key={object} exact path={'/' + object} render={(props: any) => <Auth><List object={object} {...props} /></Auth>} />\n            })}\n            {config.objects.map((object: string) => {\n              return <Route key={object + '_create'} exact path={'/' + object + '/new'} render={(props: any) => <Auth><Form object={object} {...props} /></Auth>} />\n            })}\n            {config.objects.map((object: string) => {\n              return <Route key={object + '_update'} exact path={'/' + object + '/:id'} render={(props: any) => <Auth><Form object={object} id={props.match.params.id} {...props} /></Auth>} />\n            })}\n            <Route exact path='/' component={Home} />\n            <Route exact path='/login' component={Login} />\n            <Route exact path='/setting' render={(props: any) => <Auth><Setting {...props}/></Auth>} />\n          </Switch>\n          <Overlay/>\n        </BrowserRouter>\n      </div>\n    </Provider>\n  );\n}\n\nconst Home: React.FC = () => {\n  return (\n    <div></div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}